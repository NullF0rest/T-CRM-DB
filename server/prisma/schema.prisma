datasource postgres {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt DateTime @default(now())
  firstName String?
  id        String   @id @default(cuid())
  lastName  String?
  password  String
  roles     String[]
  updatedAt DateTime @updatedAt
  username  String   @unique
}

model Customer {
  address          Address
  balanceAccount   BalanceAccount      @relation(fields: [balanceAccountId], references: [id])
  balanceAccountId String
  createdAt        DateTime            @default(now())
  dateOfBirth      DateTime?
  email            String?
  fullName         String
  id               String              @id @default(cuid())
  isActive         Boolean
  isDeleted        Boolean?
  nationalId       String?
  notes            String?
  paymentLedgers   PaymentLedger?      @relation(fields: [paymentLedgersId], references: [id])
  paymentLedgersId String?
  phoneNumber      String?
  simCards         SimCard[]
  snapshots        CustomerSnapshot[]
  status           EnumCustomerStatus?
  subscriptions    Subscription        @relation(fields: [subscriptionsId], references: [id])
  subscriptionsId  String
  updatedAt        DateTime            @updatedAt
}

model SimCard {
  activationDay DateTime?
  addonPackages AddonPackage[]
  company       Company           @relation(fields: [companyId], references: [id])
  companyId     String
  c_id          String?
  createdAt     DateTime          @default(now())
  customer      Customer?         @relation(fields: [customerId], references: [id])
  customerId    String?
  id            String            @id @default(cuid())
  number        String
  package       Package?          @relation(fields: [packageId], references: [id])
  packageId     String?
  snapshot      SimCardSnapshot[]
  updatedAt     DateTime          @updatedAt
}

model Package {
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
  createdAt   DateTime  @default(now())
  description String?
  id          String    @id @default(cuid())
  name        String
  price       Float?
  simCards    SimCard[]
  updatedAt   DateTime  @updatedAt
}

model CustomerSnapshot {
  createdAt    DateTime  @default(now())
  Customer     Json
  customerId   Customer? @relation(fields: [customerIdId], references: [id])
  customerIdId String?
  id           String    @id @default(cuid())
  updatedAt    DateTime  @updatedAt
}

model Address {
  address_1   String?
  address_2   String?
  city        String?
  createdAt   DateTime @default(now())
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String
  geolocation String?
  governate   String?
  id          String   @id @default(cuid())
  updatedAt   DateTime @updatedAt
  zipcode     String?
}

model AddonPackage {
  createdAt   DateTime  @default(now())
  description String?
  id          String    @id @default(cuid())
  name        String
  price       Float
  simCard     SimCard[]
  updatedAt   DateTime  @updatedAt
}

model Company {
  createdAt    DateTime  @default(now())
  id           String    @id @default(cuid())
  logo         String?
  name         String?
  numberPrefix String?
  packages     Package[]
  simCards     SimCard[]
  updatedAt    DateTime  @updatedAt
}

model SimCardSnapshot {
  createdAt       DateTime @default(now())
  id              String   @id @default(cuid())
  simCard         SimCard? @relation(fields: [simCardId], references: [id])
  simCardId       String?
  simCardSnapshot Json
  updatedAt       DateTime @updatedAt
}

model Subscription {
  createdAt       DateTime       @default(now())
  customer        Customer
  id              String         @id @default(cuid())
  invoice         Invoice?       @relation(fields: [invoiceId], references: [id])
  invoiceId       String?
  paymentLedger   PaymentLedger? @relation(fields: [paymentLedgerId], references: [id])
  paymentLedgerId String?
  updatedAt       DateTime       @updatedAt
}

model Transaction {
  amount           Float?
  balanceAccount   BalanceAccount       @relation(fields: [balanceAccountId], references: [id])
  balanceAccountId String
  createdAt        DateTime             @default(now())
  id               String               @id @default(cuid())
  invoices         Invoice?             @relation(fields: [invoicesId], references: [id])
  invoicesId       String?
  method           String?
  name             String?
  notes            String?
  paymentLedger    PaymentLedger?       @relation(fields: [paymentLedgerId], references: [id])
  paymentLedgerId  String?
  Time             DateTime
  type             EnumTransactionType?
  updatedAt        DateTime             @updatedAt
}

model BalanceAccount {
  balance         Float
  createdAt       DateTime       @default(now())
  customer        Customer
  id              String         @id @default(cuid())
  invoices        Invoice[]
  paymentLedger   PaymentLedger? @relation(fields: [paymentLedgerId], references: [id])
  paymentLedgerId String?
  transactions    Transaction[]
  updatedAt       DateTime       @updatedAt
}

model PaymentLedger {
  balanceAccounts BalanceAccount
  createdAt       DateTime        @default(now())
  customer        Customer
  id              String          @id @default(cuid())
  invoices        Invoice[]
  paymentOptions  PaymentOption[]
  subscriptions   Subscription[]
  transactions    Transaction[]
  updatedAt       DateTime        @updatedAt
}

model PaymentOption {
  cardNumber    Int?
  createdAt     DateTime        @default(now())
  id            String          @id @default(cuid())
  paymentLedger PaymentLedger[]
  updatedAt     DateTime        @updatedAt
}

model Invoice {
  balanceAccount   BalanceAccount? @relation(fields: [balanceAccountId], references: [id])
  balanceAccountId String?
  createdAt        DateTime        @default(now())
  id               String          @id @default(cuid())
  paymentLedger    PaymentLedger?  @relation(fields: [paymentLedgerId], references: [id])
  paymentLedgerId  String?
  subscriptions    Subscription
  transaction      Transaction
  updatedAt        DateTime        @updatedAt
}

enum EnumCustomerStatus {
  Holiday
  Retired
  Working
  OutOfCompany
}

enum EnumTransactionType {
  Credit
  Debit
}